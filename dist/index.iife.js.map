{"version":3,"file":"index.iife.js","sources":["../lib/IdentityClient.js","../lib/TokenClient.js","../lib/TasksClient.js","../lib/index.js"],"sourcesContent":["/**\n * The IdentityClient class. Uses an Access Token to find the Org and Project Identity to which it belongs.\n */\nclass IdentityClient {\n  constructor (apiHost) {\n    this.apiHost = apiHost\n  }\n\n  /**\n   * Returns the Org and Project ID for a given access token.\n   * @param accessToken An access token\n   * @return {object}\n   */\n  async GetIdentity (accessToken) {\n    if (!accessToken) {\n      throw new Error(\n        'cannot get identity, expected access token to not be empty'\n      )\n    }\n    const res = await fetch(`https://${this.apiHost}/api/v1/whoami`, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    })\n    if (res.status !== 200) {\n      throw new Error(\n        `cannot get identity, expected 200 but got ${res.status}: ${res.statusText}`\n      )\n    }\n    const details = await res.json()\n    if (!details.client) {\n      throw new Error(\n        'cannot get identity, expected response to contain client details'\n      )\n    }\n    return details.client\n  }\n}\n\nexport default IdentityClient\n","/**\n * The TokenClient class. Performs a Client Credentials OAuth2 Grant for an given Client ID and Secret.\n */\nclass TokenClient {\n  constructor (authHost, clientID, clientSecret) {\n    this.authHost = authHost\n  }\n\n  /**\n   * Create an Access Token\n   * @param clientID The OAuth Client App ID.\n   * @param clientSecret The OAuth Client App Secret.\n   * @return {string}\n   */\n  async Create (clientID, clientSecret) {\n    const res = await fetch(`https://${this.authHost}/oauth2/token`, {\n      method: 'POST',\n      headers: {\n        Authorization: `Basic ${this.getBasicAuthorizationHeader(clientID, clientSecret)}`\n      },\n      body: this.getFormDataWithGrantType('client_credentials')\n    })\n    if (res.status !== 200) {\n      throw new Error(\n        `cannot create token, expected 200 but got ${res.status}: ${res.statusText}`\n      )\n    }\n    const data = await res.json()\n    if (!data.access_token) {\n      throw new Error(\n        'cannot create token, expected response to contain access token'\n      )\n    }\n    return data.access_token\n  }\n\n  /**\n   * @private\n   */\n  getBasicAuthorizationHeader (clientID, clientSecret) {\n    return btoa(`${clientID}:${clientSecret}`)\n  }\n\n  /**\n   * @private\n   */\n  getFormDataWithGrantType (grantType) {\n    const formData = new FormData()\n    formData.append('grant_type', grantType)\n    return formData\n  }\n}\n\nexport default TokenClient\n","const maxTaskInputLength = 128000\n\n/**\n * The TasksClient class. Performs various Tasks CRUD operations against the Rightbrain AI API.\n */\nclass TasksClient {\n  constructor (tokenClient, identityClient, apiHost, clientID, clientSecret) {\n    this.tokenClient = tokenClient\n    this.identityClient = identityClient\n    this.apiHost = apiHost\n    this.clientID = clientID\n    this.clientSecret = clientSecret\n  }\n\n  /**\n   * Creates a new Task\n   * @param definition A task definition as required by the API\n   * @return {object}\n   */\n  async Create (definition) {\n    const accessToken = await this.tokenClient.Create(this.clientID, this.clientSecret)\n    const response = await fetch(await this.getTaskCreateURL(accessToken), {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${accessToken}`\n      },\n      body: JSON.stringify(definition)\n    })\n    if (response.status !== 200) {\n      throw new Error(\n        `Error creating Task, expected status code of 200, but got ${response.status}: ${response.statusText}`\n      )\n    }\n    return await response.json()\n  }\n\n  /**\n   * Runs a Task\n   * @param taskID The ID of the Task to be ran.\n   * @param taskInput The Task Input required by the Task.\n   * @param taskRevision If supplied, the revision of the Task to be ran.\n   * @return {object}\n   */\n  async Run (taskID, taskInput, taskRevision) {\n    const data = JSON.stringify(taskInput)\n    this.assertTaskInputSize(data)\n    const accessToken = await this.authClient.CreateToken()\n    const response = await fetch(await this.getTaskRunURL(accessToken, taskID, taskRevision), {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      },\n      body: this.getTaskInputFormData(data)\n    })\n    if (response.status !== 200) {\n      throw new Error(\n        `Error running Task, expected status code of 200, but got ${response.status}: ${response.statusText}`\n      )\n    }\n    return await response.json()\n  }\n\n  /**\n   * @private\n   */\n  async getTaskCreateURL (accessToken) {\n    const identity = await this.getIdentity(accessToken)\n    return `https://${this.apiHost}/api/v1/org/${identity.org_id}/project/${identity.project_id}/task`\n  }\n\n  /**\n   * @private\n   */\n  async getTaskRunURL (accessToken, taskID, taskRevision) {\n    const identity = await this.getIdentity(accessToken)\n    let url = `https://${this.apiHost}/api/v1/org/${identity.org_id}/project/${identity.project_id}/task/${taskID}/run`\n    if (taskRevision) {\n      url += `?revision=${taskRevision}`\n    }\n    return url\n  }\n\n  /**\n   * @private\n   */\n  assertTaskInputSize (taskInput) {\n    if (taskInput.length > maxTaskInputLength) {\n      throw new Error(`Error running task, max task input is ${maxTaskInputLength} but input was ${taskInput.length}`)\n    }\n  }\n\n  /**\n   * @private\n   */\n  getTaskInputFormData (taskInput) {\n    const formData = new FormData()\n    formData.append('task_input', taskInput)\n    return formData\n  }\n\n  /**\n   * @private\n   */\n  async getIdentity (accessToken) {\n    if (!this.cachedIdentity) {\n      this.cachedIdentity = await this.identityClient.GetIdentity(accessToken)\n    }\n    return this.cachedIdentity\n  }\n}\n\nexport default TasksClient\n","import IdentityClient from './IdentityClient.js'\nimport TokenClient from './TokenClient.js'\nimport TasksClient from './TasksClient.js'\n\nconst defaultTasksClientOptions = {\n  apiHost: 'app.rightbrain.ai',\n  authHost: 'oauth.rightbrain.ai',\n  clientID: null,\n  clientSecret: null\n}\n\n/**\n * Creates a new Tasks Client\n * @param options An object of options to replace the defaults.\n * @return {object}\n */\nfunction NewDefaultTasksClient (options) {\n  options = { ...defaultTasksClientOptions, ...options }\n  const identityClient = new IdentityClient(options.apiHost)\n  const tokenClient = new TokenClient(options.authHost)\n  return new TasksClient(tokenClient, identityClient, options.apiHost, options.clientID, options.clientSecret)\n}\n\nexport { NewDefaultTasksClient }\n"],"names":["IdentityClient","apiHost","_classCallCheck","_createClass","key","value","_GetIdentity","_asyncToGenerator","_regeneratorRuntime","mark","_callee","accessToken","res","details","wrap","_callee$","_context","prev","next","Error","fetch","concat","method","headers","Authorization","sent","status","statusText","json","client","abrupt","stop","GetIdentity","_x","apply","arguments","TokenClient","authHost","clientID","clientSecret","_Create","data","getBasicAuthorizationHeader","body","getFormDataWithGrantType","access_token","Create","_x2","btoa","grantType","formData","FormData","append","maxTaskInputLength","TasksClient","tokenClient","identityClient","definition","response","t0","getTaskCreateURL","t1","t2","JSON","stringify","_Run","_callee2","taskID","taskInput","taskRevision","_callee2$","_context2","assertTaskInputSize","authClient","CreateToken","getTaskRunURL","getTaskInputFormData","Run","_x3","_x4","_getTaskCreateURL","_callee3","identity","_callee3$","_context3","getIdentity","org_id","project_id","_x5","_getTaskRunURL","_callee4","url","_callee4$","_context4","_x6","_x7","_x8","length","_getIdentity","_callee5","_callee5$","_context5","cachedIdentity","_x9","defaultTasksClientOptions","NewDefaultTasksClient","options","_objectSpread"],"mappings":"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"}